{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","props","state","isLoading","movies","getMovies","a","console","log","axios","get","data","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"2RAiCeA,MA7Bf,YAA6D,EAA5CC,GAA6C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACjD,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,aAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAU,aAAd,SAA4BL,IAC5B,oBAAIK,UAAU,eAAd,SACGD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,oBAAIL,UAAU,eAAd,SACGI,GAD+BC,QAKtC,oBAAGL,UAAU,gBAAb,UAA8BH,EAAQS,MAAM,EAAG,KAA/C,gBCsDOC,G,wDAlEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAERC,MAAQ,CACNC,WAAW,EACXC,OAAQ,IALS,EAOnBC,UAPmB,sBAOP,8BAAAC,EAAA,6DACVC,QAAQC,IAAI,aADF,SAMAC,IAAMC,IACd,4DAPQ,gBAIEN,EAJF,EAGRO,KACEA,KAAQP,OAKZ,EAAKQ,SAAS,CAAER,SAAQD,WAAW,IACnCI,QAAQC,IAAI,kBAVF,2CAPO,E,gEAoBjBD,QAAQC,IAAI,qBACZK,KAAKR,YACLE,QAAQC,IAAI,4B,+BAGZD,QAAQC,IAAI,aADL,MAEuBK,KAAKX,MAA3BC,EAFD,EAECA,UAAWC,EAFZ,EAEYA,OACnB,OACE,yBAASX,UAAU,YAAnB,SACGU,EACC,qBAAKV,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGW,EAAOR,KAAI,SAACkB,GAAD,OACV,cAAC,EAAD,CAEE3B,GAAI2B,EAAM3B,GACVC,KAAM0B,EAAM1B,KACZC,MAAOyB,EAAMzB,MACbC,QAASwB,EAAMxB,QACfC,OAAQuB,EAAMC,mBACdvB,OAAQsB,EAAMtB,QANTsB,EAAM3B,e,GAtCT6B,IAAMC,YCMxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,a","file":"static/js/main.e66eecaa.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nfunction Movie({ id, year, title, summary, poster, genres }) {\n  return (\n    <div className=\"movie\">\n      <img src={poster} alt={title} title={title} />\n      <div className=\"movie_data\">\n        <h3 className=\"movie_title\">{title}</h3>\n        <h5 className=\"movie_year\">{year}</h5>\n        <ul className=\"movie_genres\">\n          {genres.map((genre, index) => (\n            <li className=\"genres_genre\" key={index}>\n              {genre}\n            </li>\n          ))}\n        </ul>\n        <p className=\"movie_summary\">{summary.slice(0, 140)}...</p>\n      </div>\n    </div>\n  );\n}\n\nMovie.propTypes = {\n  id: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Movie;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n  getMovies = async () => {\n    console.log(\"getMovies\");\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    this.setState({ movies, isLoading: false }); // setState로 render 함수를 다시 호출.\n    console.log(\"done-getMovies\");\n  }; // async-await로 axios.get으로 URL의 정보를 얻어올 때까지 기다리는 비동기처리를 한다\n  componentDidMount() {\n    console.log(\"componentDidMount\");\n    this.getMovies();\n    console.log(\"done-componentDidMount\");\n  } // render() 함수 호출 후 호출되는 componentDidMount() 함수. 동기처리로 getMovies 호출 후 바로 종료\n  render() {\n    console.log(\"im render\"); // console.log 출력\n    const { isLoading, movies } = this.state; // state의 정보를 할당\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader_text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map((movie) => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    ); // Movie.js에서 받아오는 Movie 컴포넌트를 그려준다.\n  } // log output -> state 할당 -> isLoading에서 Loading 보여줌 -> componentDidMount-getMovies 호출 -> API 호출 후, state false로 변경\n  // render 함수 호출 -> state 재할당 -> 화면에 가져온 API 정보를 뿌려준다 -> getMovies 함수로 돌아가서 movies log 출력\n}\n// state에 바꾸고 싶은 데이터를 넣는다. state는 this.state로 사용.\n// state는 App class 내부 메소드 안에서 직접 변경이 불가능하다.\n// state는 render function을 통해서만 변경?\n// Life cycle method : constructor -> componentWillMount -> render -> componentDidMount\n// setState시 : render -> componentDidUpdate\n// componentWillUnmount : component가 사라진 후 실행되는 메소드\n\n// component update를 하는 경우\n// 1. props가 바뀔 때\n// 2. state가 바뀔 때\n// 3. 부모 컴포넌트가 리렌더링 될 때,\n// 4. this.forceUpdate를 통해 강제 렌더링 트리거 시에\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(<App />, document.getElementById(\"potato\"));\n// App.js를 가져와서, index.html의 id 중 root에 해당하는 공간을 찾아 render 해준다.\n// <App/> 이것을 컴포넌트라고 한다. React는 컴포넌트로 동작\n// 컴포넌트는 HTML을 반환하는 함수이다. -> JSX의 개념은 React에서 유일함.\n// React application은 한 번에 하나의 component만 rendering 할 수 있다. 기본적으로 App.js에 컴포넌트를 넣는다.\n"],"sourceRoot":""}